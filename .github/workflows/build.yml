name: build-all
on:
  push:
    paths-ignore:
      - "README.md"
  workflow_dispatch:

jobs:
  codegen: # 将 codegen 移到最前面，作为基础任务
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: nixbuild/nix-quick-install-action@v21
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
      - name: Setup Git config # 添加 Git 配置以便提交
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      - run: nix develop -c flutter pub get
      - run: nix develop -c flutter pub run build_runner build -d
      - run: nix develop -c deps2nix
      - uses: EndBug/add-and-commit@v9.1.0
        with:
          add: "." # 明确指定要添加的文件
          message: "Run code generation and update deps"

  build-android:
    needs: [codegen] # 依赖 codegen 确保先生成代码
    runs-on: ubuntu-latest
    env:
      NIX_IGNORE_SYSTEMD: 1
    steps:
      - uses: actions/checkout@v3
      - uses: nixbuild/nix-quick-install-action@v21
        with:
          extra_nix_config: |
            build-users-group =
            sandbox = false
      - name: Write secrets for Android
        env:
          KEY_PROPERTIES: ${{ secrets.ANDROID_KEY_PROPERTIES }}
          KEY_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          mkdir -p android # 确保目录存在
          echo "$KEY_PROPERTIES" > android/key.properties
          echo "$KEY_BASE64" | base64 -d > android/keystore.jks # 统一放到 android 目录
      - run: nix develop -c flutter build apk --split-per-abi
      - uses: actions/upload-artifact@v4
        with:
          name: android
          path: build/app/outputs/flutter-apk/*.apk

  build-linux:
    needs: [codegen] # 依赖 codegen 确保先生成代码
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: nixbuild/nix-quick-install-action@v21
        with:
          extra_nix_config: | # 修复参数名称
            experimental-features = nix-command flakes
      - run: nix build -v
      - uses: actions/upload-artifact@v4
        with:
          name: linux
          path: result/app/*

  create-release:
    needs: [build-android, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts # 指定下载到统一目录
      - run: |
          ls -R artifacts
          mv artifacts/android/*.apk . # 移动文件到根目录
          mv artifacts/linux ./linux-bin
          zip -r lin.zip linux-bin
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          tag_name: nightly
          body: |
            This is an automatic nightly release
          files: |
            *.apk
            lin.zip
